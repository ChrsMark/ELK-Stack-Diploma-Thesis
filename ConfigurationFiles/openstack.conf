filter {

	if [type] =~ "libvirt"{
		grok {
                        match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"]
                }
	}   

	if [type] =~ "glance"{
		grok {
                        match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"]
                }	
	}

	if [type] =~ "keystone"{
		grok {
                        match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"]
                }
	}	

	if [type] =~ "nova"{
                grok {
                        match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"]
                }
        }

	if [type] =~ "cinder"{
		grok {		
        		match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"]
  		}
	}


}

# Handle special Free VCPUS/Disk/Ram

filter{
	if  [program] == "nova.compute.resource_tracker" {
                grok {
                        match => ["message",["%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{WORD:level} %{PROG:program} \[\-\]\s+(Free) %{WORD:freetype}+(:) %{INT:freesize:int}%{GREEDYDATA:message}", "%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{WORD:level} %{PROG:program} \[\-\]\s+(Free) %{WORD:freetype}\s+\(GB\): %{INT:freesize:int}%{GREEDYDATA:message}", "%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{WORD:level} %{PROG:program} \[\-\]\s+(Free) %{WORD:freetype}\s+\(MB\): %{INT:freesize:int}%{GREEDYDATA:message}"]]
                }
        }
}

# Handle _grokparsefailure event

filter{
	if "_grokparsefailure" in [tags] {
		 grok {
                        match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{INT:offset} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"]
                }

         }


}


filter{
	# add the value for physical node

        if [type] =~ "7" {
                mutate {
                        add_field => { "physicalNode" => "termi7" }
                }
        }
        else if  [type] =~ "8" {
        	mutate {
                        add_field => { "physicalNode" => "termi8" }
                }        
        }
        else if  [type] =~ "9" {
                mutate {
                        add_field => { "physicalNode" => "termi9" }
                }
        }

         else if  [type] =~ "10" {
                mutate {
                        add_field => { "physicalNode" => "termi10" }
                }
        }

         else if  [type] =~ "11" {
                mutate {
                        add_field => { "physicalNode" => "termi11" }
                }
        }

         else if  [type] =~ "12" {
                mutate {
                        add_field => { "physicalNode" => "termi12" }
                }
        }


}
